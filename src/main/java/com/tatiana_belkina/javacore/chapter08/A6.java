package src.main.java.com.tatiana_belkina.javacore.chapter08;

// Динамическая диспетчеризация методов
// Имя метода, число и тип его входных
// параметров образуют сигнатуру (signature) метода.
// Когда исполняющая система сталкивается с вызовом перегруженного метода,
// то выполнятся тот метод, сигнатура которого соответствует
// используемой в вызове. Если строгого соответствия не найдено,
// вызывается метод, подходящий по сигнатуре
// с учетом возможного автоматического преобразования типов входных параметров.
class A6 {
    void callme() {
        System.out.println("Внутри метода A");
    }
}

class B6 extends A6 {
    // override
    void callme() {
        System.out.println("Внутри метода B");
    }
}

class C6 extends A6 {
    // override
    void callme() {
        System.out.println("Внутри метода C");
    }
}

class Dispatch {
    public static void main(String[] args) {
        A6 a = new A6(); // тип A
        B6 b = new B6(); // тип B
        C6 c = new C6(); // тип C
        A6 r; // получить ссылку типа A

        r = a; // ссылка на объект A6.
        r.callme(); // вызывает версию метода объекта А

        r = b; // ссылка на объект  B. A6 r = new B6.
        r.callme(); // вызывает версию метода объекта B

        r = c; // ссылка на объект C
        r.callme(); // вызывает версию метода объекта C
    }
}